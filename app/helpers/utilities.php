<?php

/** =========================================================================== **/
/* > Utilities
/** =========================================================================== **/

Abstract Class Utilities 
{

	/**
	 * add_js
	 *
	 * The build script automatically combines and minifies javascript files found
	 * in the footer so in order to preserve the use of the wp_enqueue_script / wp_register_script
	 * we can pass the js file generated by the build script to this function
	 *
	 * @param path 
	 * @param deps (mixed) comma delimited str or array list of dependencies
	 * @param in_footer (bool) true to load the js in the head  
	 */
	public static function add_js($path, $deps, $in_footer)
	{

		// Create the name for registration. This uses the script file name to create the name
		// for registration. To create the name we strip out the file type, the version number, and
		// any special characters.For example if the script file name is 'jquery.test-1.1.min.js'
		// the name would be 'jquerytest'.

		$pos = strrpos($path, '/') + 1;
		$name = Utilities::slice_string($path, $pos );
		$name= preg_replace("/((-[0-9.]+)?(.min)?(.js)$)/", '', $name);
		$name = Utilities::clean_string($name, 50, '');

		$path = TEMPLATE_URL.$path;
		
		// Utilities::debug($name);
		// Utilities::debug($path);

		// convert $deps to an array if it is not an array
		if ( $deps != NULL and (array) $deps !== $deps ) {
			$deps = explode(',', preg_replace("/\s/", '', $deps) );
		}

		// Utilities::debug($deps);

		// wp_enqueue_script( $name, $path, $req, NULL, $in_footer );
		wp_register_script( $name, $path, $deps, NULL, $in_footer );

	}

	/**
	 * clean_string()
	 *
	 * Creates URL friendly strings (wordpress style)
	 */
	public static function clean_string($phrase, $maxLength=50, $sub='-') 
	{
	    $result = strtolower($phrase);
	    $result = preg_replace("/[^a-z0-9\s-]/", $sub, $result);
	    $result = trim(preg_replace("/[\s-]+/", " ", $result));
	    $result = trim(substr($result, 0, $maxLength));
	    $result = preg_replace("/\s/", $sub, $result);
	    return $result;
	}

	/**
	 * slice_string
	 *
	 * The start of the range is inclusive and the end is exclusive
	 *
	 * @param input (str) the string to be sliced up
	 * @param slice (mixed) can be a single character index, or a range separated by a colon.
	 */

	public static function slice_string($input, $slice) {



		if (is_int($slice)) {
			$start = $slice;
		} else { 
			$arg = explode(':', $slice);
			$start = intval($arg[0]);
		}

	    if ($start < 0) {
	        $start += strlen($input);
	    }
	    if (count($arg) === 1) {
	        return substr($input, $start, 1);
	    }
	    if (trim($arg[1]) === '') {
	        return substr($input, $start);
	    }
	    $end = intval($arg[1]);
	    if ($end < 0) {
	        $end += strlen($input);
	    }
	    return substr($input, $start, $end - $start);
	}

	/**
	 * twitterStyleDate()
	 * 
	 * Twitter style post dates // 트위터 스타일의 날짜 표시법
	 * i.e. instead of 'Posted 13 Jan 2011 at 7:03' it displays 'Posted 3 hours ago'
	 */
	 
	public static function twitterStyleDate($rtime) 
	{
		$tmptime = time() - $rtime;
		if($tmptime < 0)
			$rtimeStr = "Posted 1 second ago";
		else if ($tmptime < 60)
			$rtimeStr = "Posted ". (int)$tmptime . " seconds ago";
		else if ($tmptime < 120)
			$rtimeStr = "Posted ". (int)($tmptime/60) . " minute ago";
		else if ($tmptime < 3600)
			$rtimeStr = "Posted ". (int)($tmptime/60) . " minutes ago";
		else if ($tmptime < 7200)
			$rtimeStr = "Posted ". (int)($tmptime/3600) . " hour ago";
		else if ($tmptime < 86400)
			$rtimeStr = "Posted ". (int)($tmptime/3600) . " hours ago";
		else if ($tmptime < 172800)
			$rtimeStr = "Posted ". (int)($tmptime/86400) . " day ago";
		else if ($tmptime < 604800)
			$rtimeStr = "Posted ". (int)($tmptime/86400) . " days ago";
		else
			$rtimeStr = date('d F Y \a\t H:i:s' , $rtime);

		return $rtimeStr;
	}

	public static function debug($obj){
		echo '<pre>';
		var_dump($obj);
		echo '</pre>';
	}

}

?>